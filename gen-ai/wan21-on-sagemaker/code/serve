#!/usr/bin/env python3

"""
SageMaker serving script for Wan2.1
This file implements the scoring service shell. It starts nginx and gunicorn 
with the correct configurations and then waits until gunicorn exits.
"""

import multiprocessing
import os
import signal
import subprocess
import sys
import logging

# Configure logging
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

cpu_count = multiprocessing.cpu_count()

model_server_timeout = os.environ.get('MODEL_SERVER_TIMEOUT', 300)  # Increased for video generation
model_server_workers = int(os.environ.get('MODEL_SERVER_WORKERS', 1))  # Single worker for GPU

def sigterm_handler(nginx_pid, gunicorn_pid):
    try:
        logger.info("Shutting down nginx...")
        os.kill(nginx_pid, signal.SIGQUIT)
    except OSError:
        pass
    try:
        logger.info("Shutting down gunicorn...")
        os.kill(gunicorn_pid, signal.SIGTERM)
    except OSError:
        pass

    sys.exit(0)

def start_server():
    logger.info(f'Starting the inference server with {model_server_workers} workers.')

    # link the log streams to stdout/err so they will be logged to the container logs
    subprocess.check_call(['ln', '-sf', '/dev/stdout', '/var/log/nginx/access.log'])
    subprocess.check_call(['ln', '-sf', '/dev/stderr', '/var/log/nginx/error.log'])

    # Start nginx
    logger.info("Starting nginx...")
    nginx = subprocess.Popen(['nginx', '-c', '/opt/program/nginx.conf'])

    # Start gunicorn
    logger.info("Starting gunicorn...")
    gunicorn = subprocess.Popen([
        'gunicorn',
        '--timeout', str(model_server_timeout),
        '-k', 'sync',
        '-b', 'unix:/tmp/gunicorn.sock',
        '-w', str(model_server_workers),
        '--worker-class', 'sync',
        '--worker-connections', '1000',
        '--max-requests', '1000',
        '--max-requests-jitter', '50',
        '--preload',
        'wsgi:app'
    ])

    signal.signal(signal.SIGTERM, lambda a, b: sigterm_handler(nginx.pid, gunicorn.pid))

    # Exit the inference server upon exit of either subprocess
    pids = set([nginx.pid, gunicorn.pid])
    while True:
        pid, _ = os.wait()
        if pid in pids:
            break

    sigterm_handler(nginx.pid, gunicorn.pid)
    logger.info('Inference server exiting')

# The main routine to invoke the start function.
if __name__ == '__main__':
    start_server()
